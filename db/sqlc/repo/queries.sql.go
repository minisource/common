// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: queries.sql

package repo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countModels = `-- name: CountModels :one
SELECT COUNT(*) FROM models
WHERE deleted_by IS NULL AND $1
`

func (q *Queries) CountModels(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countModels)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createModel = `-- name: CreateModel :one
INSERT INTO models (field1, field2, created_by, created_at)
VALUES ($1, $2, $3, $4)
RETURNING id, field1, field2, created_by, created_at, modified_by, modified_at, deleted_by, deleted_at
`

type CreateModelParams struct {
	Field1    string           `json:"field1"`
	Field2    int32            `json:"field2"`
	CreatedBy pgtype.Int4      `json:"created_by"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) CreateModel(ctx context.Context, arg CreateModelParams) (Model, error) {
	row := q.db.QueryRow(ctx, createModel,
		arg.Field1,
		arg.Field2,
		arg.CreatedBy,
		arg.CreatedAt,
	)
	var i Model
	err := row.Scan(
		&i.ID,
		&i.Field1,
		&i.Field2,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.ModifiedBy,
		&i.ModifiedAt,
		&i.DeletedBy,
		&i.DeletedAt,
	)
	return i, err
}

const deleteModel = `-- name: DeleteModel :exec
UPDATE models
SET deleted_by = $1, deleted_at = $2
WHERE id = $3 AND deleted_by IS NULL
`

type DeleteModelParams struct {
	DeletedBy pgtype.Int4      `json:"deleted_by"`
	DeletedAt pgtype.Timestamp `json:"deleted_at"`
	ID        int32            `json:"id"`
}

func (q *Queries) DeleteModel(ctx context.Context, arg DeleteModelParams) error {
	_, err := q.db.Exec(ctx, deleteModel, arg.DeletedBy, arg.DeletedAt, arg.ID)
	return err
}

const getModel = `-- name: GetModel :one
SELECT id, field1, field2, created_by, created_at, modified_by, modified_at, deleted_by, deleted_at FROM models
WHERE id = $1 AND deleted_by IS NULL
`

func (q *Queries) GetModel(ctx context.Context, id int32) (Model, error) {
	row := q.db.QueryRow(ctx, getModel, id)
	var i Model
	err := row.Scan(
		&i.ID,
		&i.Field1,
		&i.Field2,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.ModifiedBy,
		&i.ModifiedAt,
		&i.DeletedBy,
		&i.DeletedAt,
	)
	return i, err
}

const listModels = `-- name: ListModels :many
SELECT id, field1, field2, created_by, created_at, modified_by, modified_at, deleted_by, deleted_at FROM models
WHERE deleted_by IS NULL AND $1
ORDER BY $2
LIMIT $3 OFFSET $4
`

type ListModelsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListModels(ctx context.Context, arg ListModelsParams) ([]Model, error) {
	rows, err := q.db.Query(ctx, listModels, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Model
	for rows.Next() {
		var i Model
		if err := rows.Scan(
			&i.ID,
			&i.Field1,
			&i.Field2,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.ModifiedBy,
			&i.ModifiedAt,
			&i.DeletedBy,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateModel = `-- name: UpdateModel :one
UPDATE models
SET field1 = $1, field2 = $2, modified_by = $3, modified_at = $4
WHERE id = $5 AND deleted_by IS NULL
RETURNING id, field1, field2, created_by, created_at, modified_by, modified_at, deleted_by, deleted_at
`

type UpdateModelParams struct {
	Field1     string           `json:"field1"`
	Field2     int32            `json:"field2"`
	ModifiedBy pgtype.Int4      `json:"modified_by"`
	ModifiedAt pgtype.Timestamp `json:"modified_at"`
	ID         int32            `json:"id"`
}

func (q *Queries) UpdateModel(ctx context.Context, arg UpdateModelParams) (Model, error) {
	row := q.db.QueryRow(ctx, updateModel,
		arg.Field1,
		arg.Field2,
		arg.ModifiedBy,
		arg.ModifiedAt,
		arg.ID,
	)
	var i Model
	err := row.Scan(
		&i.ID,
		&i.Field1,
		&i.Field2,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.ModifiedBy,
		&i.ModifiedAt,
		&i.DeletedBy,
		&i.DeletedAt,
	)
	return i, err
}
